const TABLE_LEN: usize = 250;

type RngTable = [u8; TABLE_LEN];

#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Rng {
    index: u8,
    table: RngTable,
}

impl Default for Rng {
    fn default() -> Self {
        Self::with_index(0)
    }
}

impl Rng {
    #[rustfmt::skip]
    const TABLE_INI: RngTable = [
        0xC9, 0xA1, 0xCA, 0x63, 0xF1, 0x36, 0xDB, 0xC8, 0x56, 0xD5, 0xCE, 0xB6, 0xA7, 0x18, 0xF1, 0x1C,
        0xC7, 0x88, 0x4C, 0x40, 0x5A, 0x98, 0x49, 0xEF, 0x28, 0xC1, 0x29, 0x74, 0x7E, 0x35, 0x49, 0x3A,
        0x97, 0xD4, 0xA1, 0xE8, 0xDA, 0xD8, 0x9C, 0x6E, 0x1A, 0xD0, 0x18, 0xDB, 0x21, 0xE1, 0x71, 0x19,
        0xB7, 0x89, 0xBD, 0x0B, 0xB4, 0x2A, 0x81, 0x5B, 0x6E, 0x2F, 0xB1, 0x9D, 0x42, 0x24, 0xAF, 0xE8,
        0xEC, 0xEC, 0xE5, 0x1C, 0x89, 0x96, 0x71, 0x7A, 0x26, 0xA5, 0x69, 0xFC, 0xB1, 0xA3, 0x0B, 0x4A,
        0x8F, 0x33, 0x19, 0x3D, 0x91, 0x7C, 0x9C, 0x6A, 0x73, 0xC1, 0xAA, 0xBC, 0x48, 0xDB, 0xFB, 0x34,
        0xA7, 0x32, 0x05, 0x70, 0xA5, 0xA2, 0x56, 0xCF, 0xA6, 0x0C, 0x17, 0x3D, 0xDD, 0x4F, 0x59, 0xC3,
        0x8A, 0x2B, 0x75, 0x43, 0x94, 0x05, 0xA9, 0x90, 0x1E, 0x34, 0x52, 0xC7, 0x1F, 0xB1, 0x4F, 0x69,
        0x9B, 0xEB, 0x41, 0x82, 0x8E, 0x34, 0xFB, 0x09, 0x3A, 0xC0, 0x46, 0xA4, 0xE2, 0x1D, 0xC8, 0x1A,
        0x13, 0xA4, 0x06, 0x6C, 0x97, 0xFD, 0x4A, 0x65, 0xC8, 0x43, 0x8F, 0xD6, 0xD5, 0x02, 0x63, 0x7A,
        0x90, 0xEB, 0xAE, 0x56, 0xF4, 0x1B, 0x74, 0x13, 0x01, 0x82, 0xF1, 0x9B, 0x2F, 0x8A, 0xDA, 0x92,
        0x0A, 0x88, 0x34, 0x6C, 0xA4, 0xE1, 0x34, 0x28, 0xC1, 0xB0, 0xC5, 0x12, 0xBA, 0x64, 0x80, 0xFC,
        0xBF, 0x03, 0x39, 0x51, 0x40, 0x75, 0x0A, 0xF9, 0xE3, 0x95, 0xE8, 0x72, 0xE2, 0x57, 0x24, 0x15,
        0xA6, 0x50, 0xE8, 0xDB, 0xFA, 0xF3, 0x31, 0xB6, 0xC9, 0xC1, 0xAD, 0x3A, 0x1D, 0x41, 0x07, 0x29,
        0xDB, 0x87, 0x1B, 0x3D, 0x88, 0x28, 0x0F, 0x1A, 0x7E, 0xBF, 0x4D, 0x5C, 0xD7, 0x86, 0xCC, 0x2B,
        0x91, 0x91, 0xC4, 0x36, 0x8F, 0x39, 0x21, 0x96, 0x99, 0xC1,
    ];

    pub fn new() -> Self {
        Self::default()
    }

    pub fn with_index(index: u8) -> Self {
        Self {
            index,
            table: Self::TABLE_INI,
        }
    }

    pub fn index(&self) -> u8 {
        self.index
    }

    pub fn set_index(&mut self, index: u8) {
        self.index = index;
    }

    pub fn table(&self) -> &RngTable {
        &self.table
    }

    pub fn gen(&mut self) -> u8 {
        let r = self.gen_helper(self.index);

        self.index = Self::index_next(self.index);

        r
    }

    pub fn undo(&mut self, index_start: u8, len: usize) {
        let mut index = index_start;

        for _ in 0..len {
            self.gen_helper(index);
            index = Self::index_next(index);
        }

        self.index = index_start;
    }

    fn gen_helper(&mut self, index: u8) -> u8 {
        let y = Self::f_y(index);
        let x = Self::f_x(index);

        let r = self.table[y] ^ self.table[x];
        self.table[x] = r;

        r
    }

    fn f_y(index: u8) -> usize {
        usize::from(if index >= TABLE_LEN as u8 {
            index - TABLE_LEN as u8
        } else {
            index
        })
    }

    fn f_x(index: u8) -> usize {
        usize::from(if index >= 147 {
            index - 147
        } else {
            index + 103
        })
    }

    fn index_next(index: u8) -> u8 {
        let nxt = index.wrapping_add(1);

        if nxt >= TABLE_LEN as u8 {
            0
        } else {
            nxt
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_undo() {
        const LEN: usize = 5;

        for index_start in 0..=0xFF {
            let rng_orig = Rng::with_index(index_start);

            let mut rng = rng_orig.clone();
            for _ in 0..LEN {
                rng.gen();
            }
            rng.undo(index_start, LEN);

            assert_eq!(rng, rng_orig);
        }
    }
}
